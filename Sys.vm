// XOR function: result = (a + b) - 2*(a & b)
function Sys.xor 0
    push argument 0
    push argument 1
    add
    push argument 0
    push argument 1
    and
    push argument 0
    push argument 1
    and
    add
    sub
    return

// Shift left function: result = x << y
function Sys.shiftLeft 2
    push argument 1
    push constant 0
    eq
    if-goto NO_SHIFT_NEEDED  // if y == 0, return x

    push constant 0
    pop local 0  // i = 0 (counter)
    push argument 0
    pop local 1  // result = x

label SHIFT_ITERATE
    push local 0
    push argument 1
    eq
    if-goto SHIFT_COMPLETE  // if i == y, exit loop

    push local 1
    push local 1
    add
    pop local 1  // result *= 2 (shift left by 1)

    push local 0
    push constant 1
    add
    pop local 0  // i++

    goto SHIFT_ITERATE

label SHIFT_COMPLETE
    push local 1
    return

label NO_SHIFT_NEEDED
    push argument 0
    return

// Compute parity function: result = parity bit of input
function Sys.computeParity 2
    push constant 0
    pop local 0  // parity = 0
    push constant 0
    pop local 1  // i = 0 (bit position)

label PARITY_ITERATE
    push local 1
    push constant 15
    eq
    if-goto PARITY_DONE  // if i == 15, exit loop

    push constant 1
    push local 1
    call Sys.shiftLeft 2  // bitmask = 1 << i
    push argument 0
    and  // ithBit = input & bitmask

    push constant 0
    eq
    not
    if-goto FLIP_PARITY  // if ithBit != 0, flip parity

    push local 1
    push constant 1
    add
    pop local 1  // i++
    goto PARITY_ITERATE

label FLIP_PARITY
    push local 0
    push constant 1
    call Sys.xor 2  // parity ^= 1
    pop local 0

    push local 1
    push constant 1
    add
    pop local 1  // i++
    goto PARITY_ITERATE

label PARITY_DONE
    push local 0
    return

// Encode function: encode input with parity bit
function Sys.encode 0
    push argument 0
    call Sys.computeParity 1  // compute parity bit

    push constant 1
    eq
    if-goto SET_HIGH_BIT  // if parity == 1, set high bit

    push argument 0
    push constant 32767
    and  // clear high bit
    return

label SET_HIGH_BIT
    push argument 0
    push constant 32767
    not
    or  // set high bit
    return

// Initialization function
function Sys.init 0
    call Sys.encode 1

label MAIN_LOOP
    goto MAIN_LOOP